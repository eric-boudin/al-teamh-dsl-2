package WebGen.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenDescriptorBase;
import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SProperty;

public class App_TextGen extends TextGenDescriptorBase {
  @Override
  public void generateText(final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    tgs.append("import React from 'react';");
    tgs.newLine();
    tgs.append("import { BrowserRouter, Routes, Route } from 'react-router-dom';");
    tgs.newLine();
    tgs.append("import * as Icons from 'grommet-icons';");
    tgs.newLine();
    tgs.append("import * as Grommet from 'grommet';");
    tgs.newLine();

    tgs.appendNode(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.theme$cCAv));
    tgs.newLine();

    ListSequence.fromList(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.pages$hjQ2)).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        tgs.appendNode(it);
      }
    });
    tgs.newLine();

    tgs.append("export const App = () => {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("return (");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("<BrowserRouter>");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("<Grommet.Grommet theme={");
    tgs.append(SPropertyOperations.getString(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.theme$cCAv), PROPS.name$MnvL));
    tgs.append("}>");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    ListSequence.fromList(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.pages$hjQ2)).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        tgs.indent();
        tgs.append("<");
        tgs.append(SPropertyOperations.getString(it, PROPS.name$MnvL));
        tgs.append(" />");
      }
    });
    tgs.newLine();
    tgs.indent();
    tgs.append("<Grommet.Box align='center'>");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("<Routes>");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    ListSequence.fromList(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.pages$hjQ2)).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        SLinkOperations.getTarget(it, LINKS.route$M9Ni);
      }
    });
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("</Routes>");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("</Grommet.Box>");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("</Grommet.Grommet>");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("</BrowserRouter>");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append(");");
    ctx.getBuffer().area().decreaseIndent();
    tgs.append("}");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink theme$cCAv = MetaAdapterFactory.getContainmentLink(0x524c482858c411cL, 0x9a4ee783c820e868L, 0x4b0f3085b2fa290cL, 0x2f6f0a41e01bdc8cL, "theme");
    /*package*/ static final SContainmentLink pages$hjQ2 = MetaAdapterFactory.getContainmentLink(0x524c482858c411cL, 0x9a4ee783c820e868L, 0x4b0f3085b2fa290cL, 0x2f6f0a41e01b9383L, "pages");
    /*package*/ static final SReferenceLink route$M9Ni = MetaAdapterFactory.getReferenceLink(0x524c482858c411cL, 0x9a4ee783c820e868L, 0x2f6f0a41e01b9380L, 0x2f6f0a41e01d0876L, "route");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
