package WebGen.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenDescriptorBase;
import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class Home_TextGen extends TextGenDescriptorBase {
  @Override
  public void generateText(final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    tgs.append("const Home = () => {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("return (");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("<div>");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("{");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("[...Array(");
    tgs.append(SPropertyOperations.getString(ctx.getPrimaryInput(), PROPS.size$G17J));
    tgs.append(")].map((_, index) => {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("return (");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("<Grommet.Box height=\"medium\" width=\"small\" overflow=\"hidden\" key={index}>");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("<Grommet.Text>Some image from random user {index + 1}</Grommet.Text>");
    tgs.newLine();
    tgs.indent();
    tgs.append("<Grommet.Carousel>");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("<Grommet.Image fit=\"cover\" src=\"https://via.placeholder.com/100x200.png?text=Image+Placeholder\" />");
    tgs.newLine();
    tgs.indent();
    tgs.append("<Grommet.Image fit=\"cover\" src=\"https://via.placeholder.com/100x200.png?text=Image+Placeholder\" />");
    tgs.newLine();
    tgs.indent();
    tgs.append("<Grommet.Image fit=\"cover\" src=\"https://via.placeholder.com/100x200.png?text=Image+Placeholder\" />");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("</Grommet.Carousel>");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("</Grommet.Box>");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append(");");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("})");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("</div>");
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append(");");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.append("}");
    tgs.newLine();
  }

  private static final class PROPS {
    /*package*/ static final SProperty size$G17J = MetaAdapterFactory.getProperty(0x524c482858c411cL, 0x9a4ee783c820e868L, 0x47265857309e671aL, 0x4726585730a107c2L, "size");
  }
}
