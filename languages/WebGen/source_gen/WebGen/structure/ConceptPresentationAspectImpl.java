package WebGen.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_App;
  private ConceptPresentation props_Button;
  private ConceptPresentation props_Clickable;
  private ConceptPresentation props_Configuration;
  private ConceptPresentation props_Grid;
  private ConceptPresentation props_Icon;
  private ConceptPresentation props_Search;
  private ConceptPresentation props_Template;
  private ConceptPresentation props_TemplateElement;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.App:
        if (props_App == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("app");
          props_App = cpb.create();
        }
        return props_App;
      case LanguageConceptSwitch.Button:
        if (props_Button == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("button");
          props_Button = cpb.create();
        }
        return props_Button;
      case LanguageConceptSwitch.Clickable:
        if (props_Clickable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Clickable = cpb.create();
        }
        return props_Clickable;
      case LanguageConceptSwitch.Configuration:
        if (props_Configuration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("configuration");
          props_Configuration = cpb.create();
        }
        return props_Configuration;
      case LanguageConceptSwitch.Grid:
        if (props_Grid == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("grid");
          props_Grid = cpb.create();
        }
        return props_Grid;
      case LanguageConceptSwitch.Icon:
        if (props_Icon == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("icon");
          props_Icon = cpb.create();
        }
        return props_Icon;
      case LanguageConceptSwitch.Search:
        if (props_Search == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("searchBar");
          props_Search = cpb.create();
        }
        return props_Search;
      case LanguageConceptSwitch.Template:
        if (props_Template == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Template = cpb.create();
        }
        return props_Template;
      case LanguageConceptSwitch.TemplateElement:
        if (props_TemplateElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_TemplateElement = cpb.create();
        }
        return props_TemplateElement;
    }
    return null;
  }
}
