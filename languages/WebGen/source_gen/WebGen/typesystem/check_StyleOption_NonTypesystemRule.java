package WebGen.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import java.util.Objects;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;

public class check_StyleOption_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_StyleOption_NonTypesystemRule() {
  }
  public void applyRule(final SNode styleOption, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if (Objects.equals(SPropertyOperations.getEnum(styleOption, PROPS.pad$hyqP), SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x524c482858c411cL, 0x9a4ee783c820e868L, 0x1b16beb9df5c4154L, "WebGen.structure.Size"), 0x152bf92bb43e3d70L, "auto"))) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(styleOption, "Auto is not supported for pad size", "r:99d8ca37-1885-4990-b8b7-f72cf4b3a514(WebGen.typesystem)", "5862681234396131079", null, errorTarget);
      }
    }
    if (Objects.equals(SPropertyOperations.getEnum(styleOption, PROPS.round$$DCd), SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x524c482858c411cL, 0x9a4ee783c820e868L, 0x1b16beb9df5c4154L, "WebGen.structure.Size"), 0x152bf92bb43e3d70L, "auto"))) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(styleOption, "Auto is not supported for round size", "r:99d8ca37-1885-4990-b8b7-f72cf4b3a514(WebGen.typesystem)", "5862681234396131153", null, errorTarget);
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.StyleOption$$8;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class PROPS {
    /*package*/ static final SProperty pad$hyqP = MetaAdapterFactory.getProperty(0x524c482858c411cL, 0x9a4ee783c820e868L, 0x515c6d8557857470L, 0x515c6d8557857471L, "pad");
    /*package*/ static final SProperty round$$DCd = MetaAdapterFactory.getProperty(0x524c482858c411cL, 0x9a4ee783c820e868L, 0x515c6d8557857470L, 0x515c6d85578581a5L, "round");
  }

  private static final class CONCEPTS {
    /*package*/ static final SInterfaceConcept StyleOption$$8 = MetaAdapterFactory.getInterfaceConcept(0x524c482858c411cL, 0x9a4ee783c820e868L, 0x515c6d8557857470L, "WebGen.structure.StyleOption");
  }
}
