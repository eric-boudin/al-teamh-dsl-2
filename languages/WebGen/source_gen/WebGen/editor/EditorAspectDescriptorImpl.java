package WebGen.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new App_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new Area_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new Button_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new Configuration_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new DisplayPost_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new Grid_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new Icon_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new Image_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new NavBar_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new Page_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new Route_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new Search_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new SizeValue_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new Template_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new Tendance_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new Texte_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new Timeline_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }
  private Collection<ConceptEditorComponent> getDeclaredEC_0(String editorComponentId) {
    if ("WebGen.editor.ClickFunction".equals(editorComponentId)) {
      return Collections.singletonList(new ClickFunction());
    }
    return Collections.emptyList();
  }
  private Collection<ConceptEditorComponent> getDeclaredEC_1(String editorComponentId) {
    switch (editorComponentId) {
      case "WebGen.editor.Border":
        return Collections.singletonList(new Border());
      case "WebGen.editor.Pad":
        return Collections.singletonList(new Pad());
      case "WebGen.editor.Round":
        return Collections.singletonList(new Round());
    }
    return Collections.emptyList();
  }
  private Collection<ConceptEditorComponent> getDeclaredEC_2(String editorComponentId) {
    if ("WebGen.editor.GridArea".equals(editorComponentId)) {
      return Collections.singletonList(new GridArea());
    }
    return Collections.emptyList();
  }
  @NotNull
  public Collection<ConceptEditorComponent> getDeclaredEditorComponents(SAbstractConcept concept, String editorComponentId) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        return getDeclaredEC_0(editorComponentId);
      case 1:
        return getDeclaredEC_1(editorComponentId);
      case 2:
        return getDeclaredEC_2(editorComponentId);
      default:
    }
    return Collections.emptyList();
  }



  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x524c482858c411cL, 0x9a4ee783c820e868L, 0x4b0f3085b2fa290cL), MetaIdFactory.conceptId(0x524c482858c411cL, 0x9a4ee783c820e868L, 0x1b16beb9df5c4165L), MetaIdFactory.conceptId(0x524c482858c411cL, 0x9a4ee783c820e868L, 0x4b0f3085b2f89485L), MetaIdFactory.conceptId(0x524c482858c411cL, 0x9a4ee783c820e868L, 0x4b0f3085b2fa290fL), MetaIdFactory.conceptId(0x524c482858c411cL, 0x9a4ee783c820e868L, 0x785ba794c78c6d7fL), MetaIdFactory.conceptId(0x524c482858c411cL, 0x9a4ee783c820e868L, 0x4b0f3085b2f914c6L), MetaIdFactory.conceptId(0x524c482858c411cL, 0x9a4ee783c820e868L, 0x4b0f3085b2f7dad9L), MetaIdFactory.conceptId(0x524c482858c411cL, 0x9a4ee783c820e868L, 0x601697a6e555e5e7L), MetaIdFactory.conceptId(0x524c482858c411cL, 0x9a4ee783c820e868L, 0x2f6f0a41e01b4f85L), MetaIdFactory.conceptId(0x524c482858c411cL, 0x9a4ee783c820e868L, 0x2f6f0a41e01b9380L), MetaIdFactory.conceptId(0x524c482858c411cL, 0x9a4ee783c820e868L, 0x2f6f0a41e01ce203L), MetaIdFactory.conceptId(0x524c482858c411cL, 0x9a4ee783c820e868L, 0x4b0f3085b2f8f7a6L), MetaIdFactory.conceptId(0x524c482858c411cL, 0x9a4ee783c820e868L, 0x1b16beb9df5f8e58L), MetaIdFactory.conceptId(0x524c482858c411cL, 0x9a4ee783c820e868L, 0x4b0f3085b2f914c9L), MetaIdFactory.conceptId(0x524c482858c411cL, 0x9a4ee783c820e868L, 0x61177c7e55308bf6L), MetaIdFactory.conceptId(0x524c482858c411cL, 0x9a4ee783c820e868L, 0x601697a6e555d604L), MetaIdFactory.conceptId(0x524c482858c411cL, 0x9a4ee783c820e868L, 0x785ba794c78c6d7dL)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x524c482858c411cL, 0x9a4ee783c820e868L, 0x4b0f3085b2f8d903L), MetaIdFactory.conceptId(0x524c482858c411cL, 0x9a4ee783c820e868L, 0x515c6d8557857470L), MetaIdFactory.conceptId(0x524c482858c411cL, 0x9a4ee783c820e868L, 0x4b0f3085b2f914c3L)).seal();
}
